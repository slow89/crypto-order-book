{"version":3,"sources":["types.ts","store/middleware/composeEnhancers.ts","store/orderBook/index.ts","store/index.ts","store/createStore.ts","store/middleware/actionMiddleware.ts","store/orderBook/actions/LoadOrderBookSnapshot.ts","store/orderBook/actions/UpdateOrderBookAsks.ts","store/orderBook/actions/UpdateOrderBookBids.ts","store/orderBook/actions/UpdateStats.ts","components/GdaxClient/connector.ts","api/stats/index.ts","components/GdaxClient/index.tsx","store/orderBook/state.ts","components/PriceLevel/index.tsx","store/bind.ts","store/selectors.ts","store/orderBook/selectors.ts","components/OrderBook/connector.ts","components/OrderBook/index.tsx","App.tsx","index.tsx"],"names":["ActionType","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","combineReducers","bids","state","arguments","length","undefined","action","type","GDAX_CLIENT_SNAPSHOT","parseSide","payload","snapshot","GDAX_CLIENT_UPDATE_BID","nState","Object","objectSpread","updateSide","change","asks","GDAX_CLIENT_UPDATE_ASK","stats","GDAX_CLIENT_UPDATE_STATS","side","isAscending","values","order","forEach","e","level","parseFloat","size","toFixed","toString","push","sort","update","console","error","index","indexOf","slice","splice","numbers","comparator","a","b","orderBook","middleware","next","meta","enhancer","applyMiddleware","apply","LoadOrderBookSnapshot","classCallCheck","this","UpdateOrderBookAsks","UpdateOrderBookBids","UpdateStats","connect","dispatch","loadSnapshot","create","updateAsks","updateBids","updateStats","Stats","createClass","key","value","url","fetch","then","res","status","text","v","JSON","parse","catch","GdaxClient","props","_this","possibleConstructorReturn","getPrototypeOf","call","getStats","bind","assertThisInitialized","_this2","websocket","WebSocket","addEventListener","event","data","changes","log","send","stringify","product_ids","channels","name","setInterval","get","React","PureComponent","connected","Side","PriceLevel","classes","Bid","last","style","totalSize","backgroundColor","react_default","createElement","className","price","replace","toPrecision","target","func","selectors","levelsToShow","getState","s","getBids","getAsks","getTopBids","createSelector","map","getTopAsks","reverse","Ask","getMidpoint","bestBid","open","midpoint","percentageChange","reduce","OrderBook","bidLength","bid","PriceLevel_PriceLevel","ask","App","store","createStore","es","OrderBook_OrderBook","GdaxClient_GdaxClient","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2899e320.chunk.js","sourcesContent":["export enum ActionType {\n  GDAX_CLIENT_SNAPSHOT = \"GDAX_CLIENT_SNAPSHOT\",\n  GDAX_CLIENT_UPDATE_BID = \"GDAX_CLIENT_UPDATE_BID\",\n  GDAX_CLIENT_UPDATE_ASK = \"GDAX_CLIENT_UPDATE_ASK\",\n  GDAX_CLIENT_UPDATE_STATS = \"GDAX_CLIENT_UPDATE_STATS\"\n}\n","import { compose } from \"redux\";\n\nconst composeEnhancers: <R>(a: R) => R =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default composeEnhancers;\n","import { AppAction } from \"../../actions\";\nimport { ISideState, IOrderBookState } from \"./state\";\nimport { combineReducers } from \"redux\";\nimport { ActionType } from \"../../types\";\nimport { Level, Change } from \"../../components/GdaxClient/model\";\nimport { IStats } from \"../../api/stats/model\";\n\nconst bids = (\n  state: ISideState | null = null,\n  action: AppAction\n): ISideState | null => {\n  switch (action.type) {\n    case ActionType.GDAX_CLIENT_SNAPSHOT:\n      return parseSide(action.payload.snapshot.bids, false);\n    case ActionType.GDAX_CLIENT_UPDATE_BID:\n      let nState = state ? { ...state } : null;\n      return updateSide(action.payload.change, nState, false);\n    case ActionType.GDAX_CLIENT_UPDATE_BID:\n\n    default:\n      return state;\n  }\n};\n\nconst asks = (\n  state: ISideState | null = null,\n  action: AppAction\n): ISideState | null => {\n  switch (action.type) {\n    case ActionType.GDAX_CLIENT_SNAPSHOT:\n      return parseSide(action.payload.snapshot.asks, true);\n    case ActionType.GDAX_CLIENT_UPDATE_ASK:\n      let nState = state ? { ...state } : null;\n      return updateSide(action.payload.change, nState, true);\n    default:\n      return state;\n  }\n};\n\nconst stats = (\n  state: IStats | null = null,\n  action: AppAction\n): IStats | null => {\n  switch (action.type) {\n    case ActionType.GDAX_CLIENT_UPDATE_STATS:\n      return action.payload.stats;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers<IOrderBookState>({\n  bids,\n  asks,\n  stats\n});\n\nfunction parseSide(side: Array<Level>, isAscending: boolean): ISideState {\n  let values: { [key: string]: number } = {};\n  let order: Array<number> = [];\n\n  side.forEach(e => {\n    let level = parseFloat(e[0]);\n    let size = parseFloat(e[1]);\n    values[level.toFixed(2).toString()] = size;\n\n    order.push(level);\n  });\n\n  return {\n    values,\n    order: sort(order, isAscending)\n  };\n}\n\nfunction updateSide(\n  update: Change,\n  side: ISideState | null,\n  isAscending: boolean\n): ISideState | null {\n  if (side == null) {\n    console.error(\"Update Side was recieved before a snapshot\");\n    return null;\n  }\n\n  const level = parseFloat(update[1]);\n  const index = side.order.indexOf(level, 0);\n\n  if (update[2] == \"0\") {\n    delete side.values[level.toFixed(2).toString()];\n\n    if (index > -1) {\n      let order = side.order.slice();\n      order.splice(index, 1);\n      side.order = order;\n    }\n  } else {\n    side.values[level.toFixed(2).toString()] = parseFloat(update[2]);\n\n    if (index == -1) {\n      let order = side.order.slice();\n      order.push(level);\n      side.order = sort(order, isAscending);\n    }\n  }\n  return side;\n}\n\nfunction sort(numbers: Array<number>, isAscending: boolean): Array<number> {\n  let comparator = isAscending\n    ? (a: number, b: number) => a - b\n    : (a: number, b: number) => b - a;\n\n  return numbers.sort(comparator);\n}\n","import { combineReducers } from \"redux\";\nimport { IApplicationState } from \"./state\";\nimport orderBook from \"./orderBook\";\n\nexport default combineReducers<IApplicationState>({\n  orderBook\n});\n","import { applyMiddleware, createStore } from \"redux\";\nimport composeEnhancers from \"./middleware/composeEnhancers\";\nimport store from \"./index\";\nimport actionMiddleware from \"./middleware/actionMiddleware\";\n\nconst middleware = [actionMiddleware];\nconst enhancer = composeEnhancers(applyMiddleware(...middleware));\n\nexport default () => createStore(store, enhancer);\n","import { Middleware } from \"redux\";\n\nconst actionMiddleware: Middleware = () => next => (action: any) => {\n  return next({ payload: {}, error: false, meta: {}, ...action });\n};\n\nexport default actionMiddleware;\n","import { AnyAction } from \"redux\";\nimport { ActionType } from \"../../../types\";\nimport { ISnaphsot } from \"../../../components/GdaxClient/model\";\n\nexport default class LoadOrderBookSnapshot implements AnyAction {\n  public static create(snapshot: ISnaphsot) {\n    return new LoadOrderBookSnapshot({ snapshot });\n  }\n\n  private constructor(\n    public readonly payload: {\n      snapshot: ISnaphsot;\n    }\n  ) {}\n\n  public readonly type = ActionType.GDAX_CLIENT_SNAPSHOT;\n}\n","import { AnyAction } from \"redux\";\nimport { ActionType } from \"../../../types\";\nimport { Change } from \"../../../components/GdaxClient/model\";\n\nexport default class UpdateOrderBookAsks implements AnyAction {\n  public static create(change: Change) {\n    return new UpdateOrderBookAsks({ change });\n  }\n\n  private constructor(\n    public readonly payload: {\n      change: Change;\n    }\n  ) {}\n\n  public readonly type = ActionType.GDAX_CLIENT_UPDATE_ASK;\n}\n","import { AnyAction } from \"redux\";\nimport { ActionType } from \"../../../types\";\nimport { Change } from \"../../../components/GdaxClient/model\";\n\nexport default class UpdateOrderBookBids implements AnyAction {\n  public static create(change: Change) {\n    return new UpdateOrderBookBids({ change });\n  }\n\n  private constructor(\n    public readonly payload: {\n      change: Change;\n    }\n  ) {}\n\n  public readonly type = ActionType.GDAX_CLIENT_UPDATE_BID;\n}\n","import { AnyAction } from \"redux\";\nimport { ActionType } from \"../../../types\";\nimport { IStats } from \"../../../api/stats/model\";\n\nexport default class UpdateStats implements AnyAction {\n  public static create(stats: IStats) {\n    return new UpdateStats({ stats });\n  }\n\n  private constructor(\n    public readonly payload: {\n      stats: IStats;\n    }\n  ) {}\n\n  public readonly type = ActionType.GDAX_CLIENT_UPDATE_STATS;\n}\n","import { connect } from \"react-redux\";\n\nimport { IGdaxClientOutputProps } from \"./props\";\nimport { IApplicationState } from \"../../store/state\";\nimport {\n  LoadOrderBookSnapshot,\n  UpdateOrderBookAsks,\n  UpdateOrderBookBids,\n  UpdateStats\n} from \"../../store/orderBook/actions\";\n\nexport default connect<null, IGdaxClientOutputProps, {}, IApplicationState>(\n  null,\n  (dispatch: any) => ({\n    loadSnapshot: snapshot => dispatch(LoadOrderBookSnapshot.create(snapshot)),\n    updateAsks: change => dispatch(UpdateOrderBookAsks.create(change)),\n    updateBids: change => dispatch(UpdateOrderBookBids.create(change)),\n    updateStats: stats => dispatch(UpdateStats.create(stats))\n  })\n);\n","import { IStats } from \"./model\";\n\nexport class Stats {\n  public static get(url: string): Promise<IStats> {\n    return fetch(url)\n      .then(res => {\n        if (res.status < 200 || res.status > 299) return res;\n        const response = res as Response;\n\n        const text = response.text();\n        if (text === null) return null;\n        return text.then(v => JSON.parse(v));\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }\n}\n","import React from \"react\";\nimport { GdaxClientProps } from \"./props\";\nimport connect from \"./connector\";\nimport { Change } from \"./model\";\nimport { Stats } from \"../../api/stats\";\n\nexport default class GdaxClient extends React.PureComponent<GdaxClientProps> {\n  public static readonly connected = connect(GdaxClient);\n\n  constructor(props: GdaxClientProps) {\n    super(props);\n    this.getStats = this.getStats.bind(this);\n  }\n\n  componentDidMount() {\n    this.getStats();\n\n    const websocket = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    websocket.addEventListener(\"message\", event => {\n      const data = JSON.parse(event.data);\n      const type = data.type;\n\n      switch (type) {\n        case \"snapshot\":\n          this.props.loadSnapshot(data);\n          break;\n        case \"l2update\":\n          data.changes.forEach((e: Change) => {\n            if (e[0] == \"buy\") {\n              this.props.updateBids(e);\n            } else {\n              this.props.updateAsks(e);\n            }\n          });\n          break;\n      }\n    });\n\n    websocket.addEventListener(\"open\", event => {\n      console.log(event);\n\n      websocket.send(\n        JSON.stringify({\n          type: \"subscribe\",\n          product_ids: [\"BTC-USD\"],\n          channels: [\n            \"level2\",\n            {\n              name: \"ticker\",\n              product_ids: [\"BTC-USD\"]\n            }\n          ]\n        })\n      );\n    });\n\n    websocket.addEventListener(\"error\", error => {\n      console.log(error);\n    });\n\n    setInterval(this.getStats, 60000);\n  }\n\n  private async getStats() {\n    const stats = await Stats.get(\n      \"https://api.pro.coinbase.com/products/BTC-USD/stats\"\n    );\n    this.props.updateStats(stats);\n  }\n\n  render() {\n    return null;\n  }\n}\n","import { IStats } from \"../../api/stats/model\";\n\nexport interface ISideState {\n  values: { [key: string]: number };\n  order: Array<number>;\n}\n\nexport interface IOrderBookState {\n  bids: ISideState | null;\n  asks: ISideState | null;\n  stats: IStats | null;\n}\n\nexport enum Side {\n  Bid,\n  Ask\n}\n\nexport interface ILevel {\n  price: number;\n  size: number;\n  side: Side;\n}\n","import React from \"react\";\nimport { PriceLevelProps } from \"./props\";\nimport \"./styles.css\";\nimport { Side } from \"../../store/orderBook/state\";\n\nexport default class PriceLevel extends React.PureComponent<PriceLevelProps> {\n  render() {\n    let classes =\n      this.props.level.side == Side.Bid ? \"bid level \" : \"ask level \";\n\n    if (this.props.last) {\n      classes += \"last\";\n    }\n    const style = this.props.totalSize\n      ? {\n          backgroundColor:\n            this.props.level.side == Side.Bid\n              ? \"rgba(92, 160, 81, \" +\n                this.props.level.size / this.props.totalSize +\n                \")\"\n              : \"rgba(191, 92, 72, \" +\n                this.props.level.size / this.props.totalSize +\n                \")\"\n        }\n      : undefined;\n\n    return (\n      <div className={classes} style={style}>\n        <div className=\"price\">\n          $\n          {this.props.level.price\n            .toFixed(2)\n            .toString()\n            .replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\")}\n        </div>\n        <div className=\"size\">\n          {this.props.level.size < 1\n            ? this.props.level.size.toFixed(4)\n            : this.props.level.size.toPrecision(5)}\n        </div>\n      </div>\n    );\n  }\n}\n","import { IApplicationState } from \"./state\";\n\nexport function bind<R, T extends (state: IApplicationState) => R | null>(\n  target: any,\n  func: T\n) {\n  return func.bind(target) as T;\n}\n","import OrderBookSelectors from \"./orderBook/selectors\";\n\nexport default {\n  orderBook: new OrderBookSelectors()\n};\n","import { bind } from \"../bind\";\nimport { Side } from \"./state\";\nimport { createSelector } from \"reselect\";\n\nexport default class NavigatorSelectors {\n  private readonly levelsToShow = 20;\n\n  public readonly getState = bind(this, s => s.orderBook);\n\n  public readonly getBids = bind(this, state => this.getState(state).bids);\n\n  public readonly getAsks = bind(this, state => this.getState(state).asks);\n\n  public readonly getTopBids = createSelector(\n    [this.getBids],\n    bids => {\n      if (bids == null) {\n        return null;\n      }\n      let topBids = bids.order.slice(0, this.levelsToShow);\n      return topBids.map(price => ({\n        price: price,\n        size: bids.values[price.toFixed(2).toString()],\n        side: Side.Bid\n      }));\n    }\n  );\n\n  public readonly getTopAsks = createSelector(\n    [this.getAsks],\n    asks => {\n      if (asks == null) {\n        return null;\n      }\n      let topAsks = asks.order.slice(0, this.levelsToShow);\n      return topAsks.reverse().map(price => ({\n        price: price,\n        size: asks.values[price.toFixed(2).toString()],\n        side: Side.Ask\n      }));\n    }\n  );\n\n  public readonly getMidpoint = createSelector(\n    [this.getAsks, this.getBids],\n    (asks, bids) => {\n      if (asks == null || bids == null) {\n        return null;\n      }\n\n      let bestBid = bids.order[0];\n      let bestAsk = asks.order[0];\n\n      return bestBid + (bestAsk - bestBid) / 2;\n    }\n  );\n\n  public readonly getStats = bind(this, state => this.getState(state).stats);\n}\n","import { connect } from \"react-redux\";\n\nimport { IOrderBookInputProps } from \"./props\";\nimport { IApplicationState } from \"../../store/state\";\nimport {\n  LoadOrderBookSnapshot,\n  UpdateOrderBookAsks,\n  UpdateOrderBookBids\n} from \"../../store/orderBook/actions\";\n\nimport selectors from \"../../store/selectors\";\n\nexport default connect<IOrderBookInputProps, null, {}, IApplicationState>(\n  state => {\n    const bids = selectors.orderBook.getTopBids(state);\n    const asks = selectors.orderBook.getTopAsks(state);\n    const stats = selectors.orderBook.getStats(state);\n    const open = stats ? parseFloat(stats.open) : undefined;\n    const midpoint = selectors.orderBook.getMidpoint(state);\n    return {\n      bids: bids,\n      asks: asks,\n      midpoint: midpoint,\n      percentageChange:\n        midpoint && open ? ((midpoint - open) / open) * 100 : undefined,\n      totalSize:\n        bids && asks\n          ? bids.map(b => b.size).reduce((a, b) => a + b) +\n            asks.map(a => a.size).reduce((a, b) => a + b)\n          : undefined\n    };\n  },\n  null\n);\n","import React from \"react\";\nimport { OrderBookProps } from \"./props\";\nimport PriceLevel from \"../PriceLevel\";\nimport connect from \"./connector\";\nimport \"./styles.css\";\n\nexport default class OrderBook extends React.PureComponent<OrderBookProps> {\n  public static readonly connected = connect(OrderBook);\n\n  render() {\n    const bidLength = this.props.bids ? this.props.bids.length : 0;\n\n    const bids = this.props.bids\n      ? this.props.bids.map((bid, index) => (\n          <PriceLevel\n            level={bid}\n            key={bid.price}\n            last={index === bidLength - 1}\n            totalSize={this.props.totalSize}\n          />\n        ))\n      : null;\n\n    const asks = this.props.asks\n      ? this.props.asks.map((ask, index) => (\n          <PriceLevel\n            level={ask}\n            key={ask.price}\n            last={index === 0}\n            totalSize={this.props.totalSize}\n          />\n        ))\n      : null;\n\n    return this.props.midpoint ? (\n      <div className=\"wrapper\">\n        <div className=\"order-book\">\n          <div className=\"title\">BTC-USD</div>\n          <div className=\"column-header\">\n            <div>Price (USD)</div>\n            <div>Market Size</div>\n          </div>\n          <div className=\"asks\">{asks}</div>\n          <div className=\"midpoint\">\n            Midpoint: $\n            {this.props.midpoint\n              .toFixed(3)\n              .toString()\n              .replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\")}\n            {this.props.percentageChange ? (\n              <div\n                className={\n                  this.props.percentageChange > 0\n                    ? \"positive\"\n                    : this.props.percentageChange < 0\n                    ? \"negative\"\n                    : undefined\n                }\n              >\n                {this.props.percentageChange > 0\n                  ? \"+\"\n                  : undefined}\n                {this.props.percentageChange.toFixed(2)}%\n              </div>\n            ) : (\n              undefined\n            )}\n          </div>\n          <div className=\"bids\">{bids}</div>\n        </div>\n      </div>\n    ) : null;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport createStore from \"./store/createStore\";\nimport GdaxClient from \"./components/GdaxClient\";\nimport OrderBook from \"./components/OrderBook\";\n\nclass App extends Component {\n  render() {\n    const store = createStore();\n    return (\n      <Provider store={store}>\n        <OrderBook.connected />\n        <GdaxClient.connected />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}